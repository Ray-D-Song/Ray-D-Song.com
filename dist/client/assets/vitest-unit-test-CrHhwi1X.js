import{_ as s}from"./copy-C1TrJ_9u.js";import{b as n,o as i,h as l}from"./index-BOjV5ntJ.js";const t={class:"markdown-body"},o=l('<h1>单元测试的定义</h1><blockquote><p>本文源码: <a href="https://github.com/Ray-D-Song/vitest-tutorial-sourcecode">https://github.com/Ray-D-Song/vitest-tutorial-sourcecode</a></p></blockquote><blockquote><p>单元测试（英语：Unit Testing）又称为模块测试 [来源请求] ，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。在过程化编程中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。 ———wiki</p></blockquote><p>在一个典型的 Vue 项目中, 我们经常需要进行单元测试的模块包括以下几种:</p><ul><li>hooks</li><li>工具函数 (utils)</li><li>校验规则 (reg)</li><li>脚手架 (bin/scaffold)</li><li>自定义 vue 指令</li><li>全局状态 (store)</li></ul><h1>初始化 Vitest</h1><p>安装 Vitest</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">bash</div><img src="'+s+`" class="copy-icon" data-code="pnpm add -D vite龍t
"></div><code><span class="line"><span style="color:#D7827E;--shiki-dark:#C0CAF5;">pnpm</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;"> add -D vitest</span></span>
<span class="line"></span></code></pre><p>Vitest 默认和 Vite 配置集成, 不需要额外的配置文件.<br> 修改<code>package.json</code>, 在<code>script</code>下新增<code>test:unit</code>命令</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">json</div><img src="`+s+`" class="copy-icon" data-code="  &quot;龍cripts&quot;: {
    ...
    &quot;test:unit&quot;: &quot;vitest&quot;,
  },
"></div><code><span class="line"><span style="color:#EA9D34;--shiki-dark:#89DDFF;">  &quot;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">scripts</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&quot;</span><span style="color:#575279;--shiki-dark:#A9B1D6;">: </span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#B4637A;--shiki-dark:#FF5370;">    ...</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#89DDFF;">    &quot;</span><span style="color:#56949F;--shiki-dark:#7AA2F7;">test:unit</span><span style="color:#797593;--shiki-dark:#89DDFF;">&quot;</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &quot;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">vitest</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&quot;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#575279;--shiki-dark:#A9B1D6;">,</span></span>
<span class="line"></span></code></pre><h1>编写测试用例</h1><p>测试一个手机号校验函数</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="/** /reg/phone.t龍 */
// 校验是否国内手机号
export function regChinesePhoneNumber(phoneNumber: string) {
  const regex = /^1[3456789]\\d{9}$/
  return regex.test(phoneNumber)
}

/** /reg/phone.test.ts */
import { describe, expect, test } from &#39;vitest&#39;
import { regChinesePhoneNumber } from &#39;../phone&#39;

describe(&#39;phone&#39;, () =&gt; {
  test(&#39;phone number belongs to Chinese&#39;, () =&gt; {
    expect(regChinesePhoneNumber(&#39;17725663831&#39;)).toBe(true)
  })
})
"></div><code><span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /reg/phone.ts </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">//</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 校验是否国内手机号</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">export</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> function</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> regChinesePhoneNumber</span><span style="color:#797593;--shiki-dark:#9ABDF5;">(</span><span style="color:#907AA9;--shiki-dark:#E0AF68;font-style:italic;--shiki-dark-font-style:inherit;">phoneNumber</span><span style="color:#286983;--shiki-dark:#89DDFF;">:</span><span style="color:#56949F;--shiki-dark:#0DB9D7;"> string</span><span style="color:#797593;--shiki-dark:#9ABDF5;">)</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">  const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> regex</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> /</span><span style="color:#286983;--shiki-dark:#BB9AF7;">^</span><span style="color:#EA9D34;--shiki-dark:#B4F9F8;">1</span><span style="color:#797593;--shiki-dark:#E0AF68;">[</span><span style="color:#286983;--shiki-dark:#E0AF68;">3456789</span><span style="color:#797593;--shiki-dark:#E0AF68;">]</span><span style="color:#286983;--shiki-dark:#BB9AF7;">\\d</span><span style="color:#286983;--shiki-dark:#89DDFF;">{9}</span><span style="color:#286983;--shiki-dark:#BB9AF7;">$</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;font-style:inherit;--shiki-dark-font-style:italic;">  return</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> regex</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">test</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">phoneNumber</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /reg/phone.test.ts </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> describe</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> expect</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> test</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">vitest</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> regChinesePhoneNumber</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">../phone</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">describe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">phone</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  test</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">phone number belongs to Chinese</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">    expect</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">regChinesePhoneNumber</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">17725663831</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">))</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">toBe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#D7827E;--shiki-dark:#FF9E64;">true</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre><p>输入命令<code>npm run test:unit</code>, 不出意外你会看到以下内容, 表明测试通过: <img src="https://r2.ray-d-song.com/202312071947299.png" alt="test result"></p><p>编写测试的代码文件通常放置在<code>__test__</code>文件夹中, 命名为<code>xxx.test.ts</code>或<code>xxx.spec.ts</code>, Vitest 会自动运行所有此类命名的文件.<br> 编写测试的基础是<code>describe、test、expect</code>关键字.<br><code>describe</code> 用于定义一个测试<code>套件</code>, 套件类似于 js 的模块, 用于将多个 test 封装到一起, 搭配<code>skip、only</code>等 api 可以实现选择性测试等功能.<br><code>test</code> 用于声明一个测试, 接收测试名称和保存测试期望的函数.<br><code>expect</code> 用于设置断言, Vitest 默认提供基于<code>chai</code>的断言, 你不知道什么是 chai 没关系, 断言是单元测试的关键助手, 后面会详细介绍</p><h1>实践</h1><p>接下来, 我们对几种常见的场景进行单测</p><h2>hooks</h2><p>hooks 是逻辑的封装, 是最需要单测的场景.<br> 编辑器和表单有一个常见需求是记录上一次更改时间, 我们可以通过几行代码封装一个 hooks.</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="/** /龍rc/hooks/useLastChange.ts */
import { watch, ref, type WatchSource } from &#39;vue&#39;
import moment from &#39;moment/moment&#39;

export function useLastChange(source: WatchSource) {
  const lastChange = ref(&#39;&#39;)

  watch(source, () =&gt; {
    lastChange.value = moment().format(&#39;YYYY-MM-DD HH:mm:ss&#39;)
  })

  return lastChange
}

/** /src/hooks/__test__/useLastChange.test.ts */
import { expect, it } from &#39;vitest&#39;
import { nextTick, ref } from &#39;vue&#39;
import { useLastChange } from &#39;../useLastChange&#39;

it(&#39;update lastChange when source changes&#39;, async () =&gt; {
  const source = ref(&#39;&#39;)
  const lastChange = useLastChange(source)
  const snapShot01 = lastChange.value
  source.value = &#39;Ray&#39;
  await nextTick()
  const snapShot02 = lastChange.value

  expect(snapShot01).not.toBe(snapShot02)
})
"></div><code><span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /src/hooks/useLastChange.ts </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> watch</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> ref</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> type</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> WatchSource</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">vue</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> moment</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">moment/moment</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">export</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> function</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> useLastChange</span><span style="color:#797593;--shiki-dark:#9ABDF5;">(</span><span style="color:#907AA9;--shiki-dark:#E0AF68;font-style:italic;--shiki-dark-font-style:inherit;">source</span><span style="color:#286983;--shiki-dark:#89DDFF;">:</span><span style="color:#56949F;--shiki-dark:#C0CAF5;"> WatchSource</span><span style="color:#797593;--shiki-dark:#9ABDF5;">)</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">  const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> lastChange</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> ref</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  watch</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">source</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">    lastChange</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#7DCFFF;font-style:italic;--shiki-dark-font-style:inherit;">value</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> moment</span><span style="color:#575279;--shiki-dark:#9ABDF5;">()</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">format</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">YYYY-MM-DD HH:mm:ss</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;font-style:inherit;--shiki-dark-font-style:italic;">  return</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> lastChange</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /src/hooks/__test__/useLastChange.test.ts </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> expect</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> it</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">vitest</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> nextTick</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> ref</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">vue</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> useLastChange</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">../useLastChange</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">it</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">update lastChange when source changes</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;"> async</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">  const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> source</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> ref</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">  const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> lastChange</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> useLastChange</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">source</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">  const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> snapShot01</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> lastChange</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#7DCFFF;font-style:italic;--shiki-dark-font-style:inherit;">value</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">  source</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#7DCFFF;font-style:italic;--shiki-dark-font-style:inherit;">value</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">Ray</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;font-style:inherit;--shiki-dark-font-style:italic;">  await</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> nextTick</span><span style="color:#575279;--shiki-dark:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">  const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> snapShot02</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> lastChange</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#7DCFFF;font-style:italic;--shiki-dark-font-style:inherit;">value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  expect</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">snapShot01</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">not</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">toBe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">snapShot02</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre><p>hooks 的测试比较简单, 就是执行后比对结果. utils 和 reg 也是类似, 此处略过.</p><h2>scaffold</h2><p>脚手架一般是框架自身提供的命令行工具, 用于生成模板代码, 放置于 bin 目录.<br> Vue 和 React 自身只提供了创建项目工具, 没有提供类似 Rails Command Line 的项目搭建工具. 因此前端spa项目的脚手架都是自己针对常见业务场景的封装.<br> 脚手架一般通过 npm 命令执行, 在 package.json 中添加一条命令</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">json</div><img src="`+s+`" class="copy-icon" data-code="&quot;create&quot;: &quot;node ./bin/create.j龍 --type=$npm_config_type --path=$npm_config_path
"></div><code><span class="line"><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&quot;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">create</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&quot;</span><span style="color:#575279;--shiki-dark:#A9B1D6;">: </span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&quot;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">node ./bin/create.js --type=$npm_config_type --path=$npm_config_path</span></span>
<span class="line"></span></code></pre><p>运行<code>npm run create --type=table --path=&#39;/Users/ray-d-song/temp/SourceCode/vitest-tutorial-sourcecode/src/views/TestTable.vue&#39; </code>, 就会执行 /bin/index 脚本中的内容并将 type 和 path 值作为参数传递.<br> 编写 create 脚本:</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">js</div><img src="`+s+`" class="copy-icon" data-code="/** /龍rc/bin/create.js */
import minimist from &#39;minimist&#39;
import { readFileSync, writeFileSync } from &#39;fs&#39;

function main() {
  // 使用 minimist 处理参数
  const args = minimist(process.argv.slice(2))
  const { type, path } = args
  let temp = &#39;&#39;
  if(type === &#39;table&#39;) {
    temp = readFileSync(&#39;./src/bin/dist/table&#39;, &#39;utf-8&#39;) 
  }
  writeFileSync(path, temp)
  console.log(&#39;\\n创建完成&#39;)
}

main()
"></div><code><span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /src/bin/create.js </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> minimist</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">minimist</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> readFileSync</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> writeFileSync</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">fs</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;">function</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> main</span><span style="color:#797593;--shiki-dark:#9ABDF5;">()</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">  //</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 使用 minimist 处理参数</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">  const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> args</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> minimist</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">process</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#7DCFFF;font-style:italic;--shiki-dark-font-style:inherit;">argv</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">slice</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#D7827E;--shiki-dark:#FF9E64;">2</span><span style="color:#575279;--shiki-dark:#9ABDF5;">))</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">  const</span><span style="color:#797593;--shiki-dark:#89DDFF;"> {</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> type</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> path</span><span style="color:#797593;--shiki-dark:#89DDFF;"> }</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> args</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">  let</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> temp</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;">  if</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">type</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> ===</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">table</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">) </span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">    temp</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> readFileSync</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">./src/bin/dist/table</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">utf-8</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">) </span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  writeFileSync</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">path</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> temp</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">  console</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">log</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#286983;--shiki-dark:#89DDFF;">\\n</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">创建完成</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">main</span><span style="color:#575279;--shiki-dark:#9ABDF5;">()</span></span>
<span class="line"></span></code></pre><p>脚手架其实只进行 3 个操作, 获取参数, 读取对应的模板, 创建目标文件.<br> vitest 和 jest 并没有比较好的执行 npm 命令的方法, 因此我们要对上面的方法稍加改造:</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">js</div><img src="`+s+`" class="copy-icon" data-code="/** /龍rc/bin/create.js */
import { readFileSync, writeFileSync } from &#39;fs&#39;

function create(args) {
  const { type, path } = args
  let temp = &#39;&#39;
  if(type === &#39;table&#39;) {
    temp = readFileSync(&#39;./src/bin/dist/table&#39;, &#39;utf-8&#39;) 
  } else {
    throw &#39;当前仅支持生成 table 类型&#39;
  }
  writeFileSync(path, temp)
  console.log(&#39;\\n创建完成&#39;)
}

export default create

/** /src/bin/index.js */
import create from &#39;./create&#39;

// 使用 minimist 处理参数
const args = minimist(process.argv.slice(2))
try {
  create(args)
} catch(e) {
  console.log(e)
}
"></div><code><span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /src/bin/create.js </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> readFileSync</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> writeFileSync</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">fs</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;">function</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> create</span><span style="color:#797593;--shiki-dark:#9ABDF5;">(</span><span style="color:#907AA9;--shiki-dark:#E0AF68;font-style:italic;--shiki-dark-font-style:inherit;">args</span><span style="color:#797593;--shiki-dark:#9ABDF5;">)</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">  const</span><span style="color:#797593;--shiki-dark:#89DDFF;"> {</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> type</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> path</span><span style="color:#797593;--shiki-dark:#89DDFF;"> }</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> args</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">  let</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> temp</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;">  if</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">type</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> ===</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">table</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">) </span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">    temp</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> readFileSync</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">./src/bin/dist/table</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">utf-8</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">) </span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> else</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;">    throw</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">当前仅支持生成 table 类型</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  writeFileSync</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">path</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> temp</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">  console</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">log</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#286983;--shiki-dark:#89DDFF;">\\n</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">创建完成</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">export</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> default</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> create</span></span>
<span class="line"></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /src/bin/index.js </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> create</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">./create</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">//</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 使用 minimist 处理参数</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> args</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> minimist</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">process</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#7DCFFF;font-style:italic;--shiki-dark-font-style:inherit;">argv</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">slice</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#D7827E;--shiki-dark:#FF9E64;">2</span><span style="color:#575279;--shiki-dark:#9ABDF5;">))</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;">try</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  create</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">args</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> catch</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">e</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">  console</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">log</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">e</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span></span>
<span class="line"></span></code></pre><p>将脚本入口和执行方法分离是为了防止 unit test 过程中自动执行 main 方法报错.<br> 接下来我们就可以在 test 中导入 create 方法进行测试. 断言可以通过读取生成的模板内容和 table 文件中内容进行比较.<br> 以下是测试用例, 从参数、生成内容进行测试</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="/** /龍rc/bin/__test__/create.test.ts */
import create from &#39;../create&#39;
import { describe, expect, it } from &#39;vitest&#39;
import { readFileSync } from &#39;fs&#39;

describe(&#39;bin scaffold module&#39;, () =&gt; {

  describe(&#39;create table error args&#39;, () =&gt; {
    it(&#39;error temp type&#39;, () =&gt; {
      try {
        create({
          type: &#39;dialog&#39;,
          path: &#39;/Users/ray-d-song/temp/SourceCode/vitest-tutorial-sourcecode/src/bin/__test__/dialog.vue&#39;
        })
      } catch(e) {
        expect(e).toBe(&#39;当前仅支持生成 table 类型&#39;)
        const product = readFileSync(&#39;/Users/ray-d-song/temp/SourceCode/vitest-tutorial-sourcecode/src/bin/__test__/dialog.vue&#39;, &#39;utf-8&#39;)
        expect(product).toBeUndefined
      }
    })
  })

  it(&#39;create table&#39;, () =&gt; {
    create({
      type: &#39;table&#39;,
      path: &#39;/Users/ray-d-song/temp/SourceCode/vitest-tutorial-sourcecode/src/bin/__test__/table.vue&#39;
    })
    const temp = readFileSync(&#39;/Users/ray-d-song/temp/SourceCode/vitest-tutorial-sourcecode/src/bin/dist/table&#39;, &#39;utf-8&#39;)
    const product = readFileSync(&#39;/Users/ray-d-song/temp/SourceCode/vitest-tutorial-sourcecode/src/bin/__test__/table.vue&#39;, &#39;utf-8&#39;)
    expect(temp).toBe(product)
  })

})
"></div><code><span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /src/bin/__test__/create.test.ts </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> create</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">../create</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> describe</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> expect</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> it</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">vitest</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> readFileSync</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">fs</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">describe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">bin scaffold module</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  describe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">create table error args</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">    it</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">error temp type</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;">      try</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">        create</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#73DACA;">          type</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">dialog</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#73DACA;">          path</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">/Users/ray-d-song/temp/SourceCode/vitest-tutorial-sourcecode/src/bin/__test__/dialog.vue</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">        }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">      }</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> catch</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">e</span><span style="color:#575279;--shiki-dark:#9ABDF5;">) </span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">        expect</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">e</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">toBe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">当前仅支持生成 table 类型</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">        const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> product</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> readFileSync</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">/Users/ray-d-song/temp/SourceCode/vitest-tutorial-sourcecode/src/bin/__test__/dialog.vue</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">utf-8</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">        expect</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">product</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#7DCFFF;font-style:italic;--shiki-dark-font-style:inherit;">toBeUndefined</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">      }</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">    }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  it</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">create table</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">    create</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#73DACA;">      type</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">table</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#73DACA;">      path</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">/Users/ray-d-song/temp/SourceCode/vitest-tutorial-sourcecode/src/bin/__test__/table.vue</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">    }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">    const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> temp</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> readFileSync</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">/Users/ray-d-song/temp/SourceCode/vitest-tutorial-sourcecode/src/bin/dist/table</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">utf-8</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">    const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> product</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> readFileSync</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">/Users/ray-d-song/temp/SourceCode/vitest-tutorial-sourcecode/src/bin/__test__/table.vue</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">utf-8</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">    expect</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">temp</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">toBe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">product</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre><p><img src="https://r2.ray-d-song.com/202312121120257.png" alt="result"></p><h2>自定义 Vue 指令</h2><p>自定义一个 v-debounce, 用于给按钮增加防抖效果</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="import _ from &#39;loda龍h&#39;

const vDebounce = {
  beforeMount(el: HTMLElement, binding: {value: () =&gt; void}) {
    el.addEventListener(&#39;click&#39;, _.debounce(binding.value, 600))
  }
}

app.directive(&#39;debounce&#39;, vDebounce)
"></div><code><span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> _</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">lodash</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> vDebounce</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  beforeMount</span><span style="color:#797593;--shiki-dark:#9ABDF5;">(</span><span style="color:#907AA9;--shiki-dark:#E0AF68;font-style:italic;--shiki-dark-font-style:inherit;">el</span><span style="color:#286983;--shiki-dark:#89DDFF;">:</span><span style="color:#56949F;--shiki-dark:#C0CAF5;"> HTMLElement</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#907AA9;--shiki-dark:#E0AF68;font-style:italic;--shiki-dark-font-style:inherit;"> binding</span><span style="color:#286983;--shiki-dark:#89DDFF;">:</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">value</span><span style="color:#286983;--shiki-dark:#89DDFF;">:</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#56949F;--shiki-dark:#0DB9D7;"> void</span><span style="color:#797593;--shiki-dark:#9ABDF5;">})</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">    el</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">addEventListener</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">click</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> _</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">debounce</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">binding</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#7DCFFF;font-style:italic;--shiki-dark-font-style:inherit;">value</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#D7827E;--shiki-dark:#FF9E64;"> 600</span><span style="color:#575279;--shiki-dark:#9ABDF5;">))</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">app</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">directive</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">debounce</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> vDebounce</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre><p>为了测试这个指令, 我们需要模拟<code>组件挂载-&gt;用户点击-&gt;方法调用的过程</code>, 也就是我们需要调用部分组件测试的能力. <code>@vue/test-utils</code> 是常用的 Vue 组件测试库.</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">bash</div><img src="`+s+`" class="copy-icon" data-code="pnpm in龍tall @vue/test-utils
"></div><code><span class="line"><span style="color:#D7827E;--shiki-dark:#C0CAF5;">pnpm</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;"> install @vue/test-utils</span></span>
<span class="line"></span></code></pre><p>vue-test-utils 兼容 jest 和 Vitest, 安装后可以直接使用. 下面是自定义指令的功能测试:</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="/** /龍rc/utils/__test__/directives.test.ts */
import { describe, expect, it } from &#39;vitest&#39;
import { defineComponent, nextTick, ref } from &#39;vue&#39;
import { mount } from &#39;@vue/test-utils&#39;
import { vDebounce } from &#39;../directives&#39;

// 使用 defineComponent 定义测试组件
// 该 api 除了 template 作为字符串传递外
// 还可以使用 tsx 获得更好的代码提示
const tc = defineComponent({
  setup() {
    const num = ref(0)
    function add() {
      num.value++
    }
    return {
      num,
      add  
    }
  },
  template: &#39;&lt;button v-debounce=&quot;add&quot;&gt;num: {{num}}&lt;/button&gt;&#39;
})

describe(&#39;custom directives&#39;, async () =&gt; {
  // vue-test-utils 的 mount api, 将组件实例化
  it(&#39;debounce submit&#39;, async () =&gt; {
    const wrapper = mount(tc, {
      global: {
        directives: {
          debounce: vDebounce
        }
      }
    })

    // 每过 200 毫秒点击一次 button
    const interval = setInterval(async () =&gt; {
      // find api 查找目标元素
      await wrapper.find(&#39;button&#39;).trigger(&#39;click&#39;)
    }, 200)
    // 阻塞 1000 秒, 让点击事件在 1 秒内执行 4 次
    await new Promise(resolve =&gt; setTimeout(resolve, 1000))

    clearInterval(interval)

    // 阻塞 700 秒, 等待函数执行
    await new Promise(resolve =&gt; setTimeout(resolve, 700))
    // 确保组件重新渲染
    await nextTick()
    // 获取目标元素
    const btn = wrapper.get(&#39;button&#39;)
    // 对目标元素的文本进行断言
    expect(btn.text()).toBe(&#39;num: 1&#39;)
  })
})
"></div><code><span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /src/utils/__test__/directives.test.ts </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> describe</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> expect</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> it</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">vitest</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> defineComponent</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> nextTick</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> ref</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">vue</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> mount</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">@vue/test-utils</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> vDebounce</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">../directives</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">//</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 使用 defineComponent 定义测试组件</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">//</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 该 api 除了 template 作为字符串传递外</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">//</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 还可以使用 tsx 获得更好的代码提示</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> tc</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> defineComponent</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  setup</span><span style="color:#797593;--shiki-dark:#9ABDF5;">()</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">    const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> num</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> ref</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#D7827E;--shiki-dark:#FF9E64;">0</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;">    function</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> add</span><span style="color:#797593;--shiki-dark:#9ABDF5;">()</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">      num</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#7DCFFF;font-style:italic;--shiki-dark-font-style:inherit;">value</span><span style="color:#286983;--shiki-dark:#89DDFF;">++</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;font-style:inherit;--shiki-dark-font-style:italic;">    return</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">      num</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">      add</span><span style="color:#575279;--shiki-dark:#9ABDF5;">  </span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#73DACA;">  template</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">&lt;button v-debounce=&quot;add&quot;&gt;num: {{num}}&lt;/button&gt;</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">describe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">custom directives</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;"> async</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">  //</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> vue-test-utils 的 mount api, 将组件实例化</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  it</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">debounce submit</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;"> async</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">    const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> wrapper</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> mount</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">tc</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#73DACA;">      global</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#73DACA;">        directives</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#41A6B5;">          debounce</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> vDebounce</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">        }</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">      }</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">    }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">    //</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 每过 200 毫秒点击一次 button</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">    const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> interval</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> setInterval</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">async</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">      //</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> find api 查找目标元素</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;font-style:inherit;--shiki-dark-font-style:italic;">      await</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> wrapper</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">find</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">button</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">trigger</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">click</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">    }</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#D7827E;--shiki-dark:#FF9E64;"> 200</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">    //</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 阻塞 1000 秒, 让点击事件在 1 秒内执行 4 次</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;font-style:inherit;--shiki-dark-font-style:italic;">    await</span><span style="color:#286983;--shiki-dark:#89DDFF;"> new</span><span style="color:#56949F;--shiki-dark:#0DB9D7;"> Promise</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#907AA9;--shiki-dark:#E0AF68;font-style:italic;--shiki-dark-font-style:inherit;">resolve</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> setTimeout</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">resolve</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#D7827E;--shiki-dark:#FF9E64;"> 1000</span><span style="color:#575279;--shiki-dark:#9ABDF5;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">    clearInterval</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">interval</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">    //</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 阻塞 700 秒, 等待函数执行</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;font-style:inherit;--shiki-dark-font-style:italic;">    await</span><span style="color:#286983;--shiki-dark:#89DDFF;"> new</span><span style="color:#56949F;--shiki-dark:#0DB9D7;"> Promise</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#907AA9;--shiki-dark:#E0AF68;font-style:italic;--shiki-dark-font-style:inherit;">resolve</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> setTimeout</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">resolve</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#D7827E;--shiki-dark:#FF9E64;"> 700</span><span style="color:#575279;--shiki-dark:#9ABDF5;">))</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">    //</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 确保组件重新渲染</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;font-style:inherit;--shiki-dark-font-style:italic;">    await</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> nextTick</span><span style="color:#575279;--shiki-dark:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">    //</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 获取目标元素</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">    const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> btn</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> wrapper</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">get</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">button</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">    //</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 对目标元素的文本进行断言</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">    expect</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">btn</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">text</span><span style="color:#575279;--shiki-dark:#9ABDF5;">())</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">toBe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">num: 1</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre><h2>store</h2><p>大型的前端项目基本都会用到全局的状态管理库, Vue3 最流行的是 Pinia.<br> Pinia 提供了可用于测试的 api.</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="import { createPinia, 龍etActivePinia } from &#39;pinia&#39;
import { beforeEach, describe, expect, it } from &#39;vitest&#39;
import { useCounterStore } from &#39;../counter&#39;

describe(&#39;Counter Store&#39;, () =&gt; {
  beforeEach(() =&gt; {
    setActivePinia(createPinia())
  })

  it(&#39;increments&#39;, () =&gt; {
    const counter = useCounterStore()
    expect(counter.count).toBe(0)
    counter.increment()
    expect(counter.count).toBe(1)
  })
})
"></div><code><span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> createPinia</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> setActivePinia</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">pinia</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> beforeEach</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> describe</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> expect</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> it</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">vitest</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> useCounterStore</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">../counter</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">describe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">Counter Store</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  beforeEach</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">    setActivePinia</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">createPinia</span><span style="color:#575279;--shiki-dark:#9ABDF5;">())</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  it</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">increments</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">    const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> counter</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> useCounterStore</span><span style="color:#575279;--shiki-dark:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">    expect</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">counter</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#7DCFFF;font-style:italic;--shiki-dark-font-style:inherit;">count</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">toBe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#D7827E;--shiki-dark:#FF9E64;">0</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">    counter</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">increment</span><span style="color:#575279;--shiki-dark:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">    expect</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">counter</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#7DCFFF;font-style:italic;--shiki-dark-font-style:inherit;">count</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">toBe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#D7827E;--shiki-dark:#FF9E64;">1</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre><p>这里引入了一个新的 api: <code>beforeEach</code>, 这是一种<code>测试生命周期钩子</code>, 传入的方法在每个测试用例之前执行.<br> 我们传入了 pinia 的 <code>setActivePinia</code> api, 这是个 SSR 经常使用的 api, 用户设置一个激活的 Pinia 实例.</p><h1>断言</h1><p>断言是单元测试的核心, 本质一堆用来判断结果的函数库.<br> 在上面的例子, 我们使用了<code>toBe</code>断言, 这是最常用的断言, 该断言用于判断值相等或者相同引用, 类似于<code>Object.is</code>.<br> 以下为常用的几种断言:</p><table><thead><tr><th>断言</th><th>功能</th></tr></thead><tbody><tr><td>not</td><td>取反</td></tr><tr><td>toBe</td><td>判断值或对象引用是否相同</td></tr><tr><td>toEqual</td><td>判断对象值是否相同</td></tr><tr><td>toBeGreaterThan</td><td>大于</td></tr><tr><td>toBeGreaterThanOrEqual</td><td>大于等于</td></tr><tr><td>toBeLessThan</td><td>小于</td></tr><tr><td>toBeLessThanOrEqual</td><td>小于等于</td></tr><tr><td>soft</td><td><code>expect.soft</code> 遇到某条用例失败也不会停止测试, 直到所有用例执行完毕展示所有错误</td></tr><tr><td>toBeTypeOf</td><td>断言类型是否相同</td></tr><tr><td>toBeInstanceOf</td><td>判断是否是目标类的实例</td></tr><tr><td>toStrictEqual</td><td>严格相等, 会检查具有 undefined 属性的 key、数组稀疏性、对象类型是否相等</td></tr><tr><td>toContain</td><td>检查数组元素和子串</td></tr><tr><td>toThrowError</td><td>检查函数调用过程中是否报错</td></tr><tr><td>resolves</td><td><code>expect(func()).resolves.toEqual</code></td></tr><tr><td>rejects</td><td><code>expect(func()).rejects.toThrow</code></td></tr></tbody></table><h1>mock</h1><p>为了应对业务耦合, 做到仅测试功能代码, 我们可以使用 mock 工具进行数据模拟.<br> 最常见的场景是模拟请求, 一般情况下你可以自己用一个 Promise 来模拟请求结果, 但有些情况也许你需要更真实的场景.<br> 常用的 mock 工具, 例如 APIfox, 是通过接口定义来「启动一个真实的服务器返回假数据」. 而 Vitest 并不会启动真正的 node 服务器, 而是通过<code>mswjs</code>来拦截对应地址的请求.<br> 也就是说你可以很方便的去模拟「异常请求」的场景.<br> 首先安装 msw: <code>pnpm install msw</code></p><p>假设我们需要请求<code>https://thorn.mock/test</code>这个接口, 获取<code>{msg: &#39;hey&#39;}</code>的 json 数据, 以下是我们的测试用例.</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="/** /龍rc/api/__test__/mock.test.ts */
import { describe, expect, it } from &#39;vitest&#39;

describe(&#39;mock&#39;, async () =&gt; {
  it(&#39;mock api&#39;, async () =&gt; {
    const response = await fetch(&#39;https://thorn.mock/test&#39;) 
    // 使用 toEqual 来比较对象值
    expect(await response.json()).toEqual({
      msg: &#39;hey&#39;
    })
  })
})
"></div><code><span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /src/api/__test__/mock.test.ts </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> describe</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> expect</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> it</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">vitest</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">describe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">mock</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;"> async</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  it</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">mock api</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;"> async</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">    const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> response</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#286983;--shiki-dark:#BB9AF7;font-style:inherit;--shiki-dark-font-style:italic;"> await</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> fetch</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">https://thorn.mock/test</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">) </span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">    //</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 使用 toEqual 来比较对象值</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">    expect</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#286983;--shiki-dark:#BB9AF7;font-style:inherit;--shiki-dark-font-style:italic;">await</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> response</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">json</span><span style="color:#575279;--shiki-dark:#9ABDF5;">())</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">toEqual</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#73DACA;">      msg</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">hey</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">    }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre><p>为了 mock 这个接口, 我们需要按照 msw 的语法编写一个 server.</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="/** /龍rc/mocks/server.ts */
import { setupServer } from &#39;msw/node&#39;
import { HttpHandler, HttpResponse, http } from &#39;msw&#39;

export const handlers: Array&lt;HttpHandler&gt; = [
  http.get(&#39;https://thorn.mock/test&#39;, () =&gt; {
    return HttpResponse.json({
      msg: &#39;hey&#39;
    })
  })
]

export const server = setupServer(...handlers)
"></div><code><span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /src/mocks/server.ts </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> setupServer</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">msw/node</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> HttpHandler</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> HttpResponse</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> http</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">msw</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">export</span><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;"> const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> handlers</span><span style="color:#286983;--shiki-dark:#89DDFF;">:</span><span style="color:#56949F;--shiki-dark:#C0CAF5;"> Array</span><span style="color:#797593;--shiki-dark:#89DDFF;">&lt;</span><span style="color:#56949F;--shiki-dark:#C0CAF5;">HttpHandler</span><span style="color:#797593;--shiki-dark:#89DDFF;">&gt;</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#575279;--shiki-dark:#9ABDF5;"> [</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">  http</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">get</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">https://thorn.mock/test</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;font-style:inherit;--shiki-dark-font-style:italic;">    return</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> HttpResponse</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">json</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#73DACA;">      msg</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">hey</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">    }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#9ABDF5;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">export</span><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;"> const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> server</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> setupServer</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#286983;--shiki-dark:#F7768E;font-weight:inherit;--shiki-dark-font-weight:bold;">...</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">handlers</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre><p>理想状况下, 我们希望每一次测试开始都启动 mock 服务器, 测试结束将服务关掉, Vitest 提供了四个 api 来实现这个过程.<br> 在 Vitest.config.ts 中, 添加 setupFiles 选项, 该选项接受<code>string|string[]</code>作为文件路径, 写入的文件每次 Vitest 启动都会自动执行.</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="defineConfig({
  te龍t: {
    // ...
    setupFiles: &#39;./src/setup.ts&#39;
    // ...
  }
})
"></div><code><span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">defineConfig</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#73DACA;">  test</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">    //</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> ...</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#73DACA;">    setupFiles</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">./src/setup.ts</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">    //</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> ...</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre><p>在 setup.ts 文件中, 我们调用 Vitest 钩子:</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="import { 龍erver } from &#39;./mocks/server&#39;
import { beforeAll, afterAll, afterEach } from &#39;vitest&#39;

// 在每一次测试开始前开启服务器
beforeAll(() =&gt; server.listen({ onUnhandledRequest: &#39;error&#39; }))
// 在每一次测试结束后关闭服务器
afterAll(() =&gt; server.close())
// 在每一个用例结束后重置 handlers
afterEach(() =&gt; server.resetHandlers())
"></div><code><span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> server</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">./mocks/server</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> beforeAll</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> afterAll</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> afterEach</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">vitest</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">//</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 在每一次测试开始前开启服务器</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">beforeAll</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> server</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">listen</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span><span style="color:#575279;--shiki-dark:#73DACA;"> onUnhandledRequest</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">error</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">))</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">//</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 在每一次测试结束后关闭服务器</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">afterAll</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> server</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">close</span><span style="color:#575279;--shiki-dark:#9ABDF5;">())</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">//</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 在每一个用例结束后重置 handlers</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">afterEach</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> server</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">resetHandlers</span><span style="color:#575279;--shiki-dark:#9ABDF5;">())</span></span>
<span class="line"></span></code></pre><p>开启测试, 会显示测试已通过.<br><img src="https://r2.ray-d-song.com/202312141529162.png" alt="unit test pass"> 请注意, 因为 msw 的作用是拦截请求而不是开启模拟服务器, 因此直接本地调用并不起作用.</p><h1>异步测试</h1><h1>优化测试过程</h1><h2>内联测试</h2><p>就和内联样式表一样, 所谓内联测试就是将测试代码和源码写在一起.<br> 改造一下正则表达式的例子:</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="/** /龍rc/reg/phone.ts */
export function regChinesePhoneNumber(phoneNumber: string) {
  const regex = /^1[3456789]\\d{9}$/
  return regex.test(phoneNumber)
}

// 内联测试应该放在源码的底部
/**
 * 为了解决 ts 报错
 * 需要在 tsconfig.json 中添加
 * {&quot;compilerOptions&quot;: {&quot;types&quot;: [&quot;vitest/importMeta&quot;]}}
 */
if(import.meta.vitest) {
  const { it, expect } = import.meta.vitest
  it(&#39;phone number belongs to Chinese&#39;, () =&gt; {
    expect(regChinesePhoneNumber(&#39;41772566381&#39;)).toBe(false)
  })
}
"></div><code><span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /src/reg/phone.ts </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">export</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> function</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> regChinesePhoneNumber</span><span style="color:#797593;--shiki-dark:#9ABDF5;">(</span><span style="color:#907AA9;--shiki-dark:#E0AF68;font-style:italic;--shiki-dark-font-style:inherit;">phoneNumber</span><span style="color:#286983;--shiki-dark:#89DDFF;">:</span><span style="color:#56949F;--shiki-dark:#0DB9D7;"> string</span><span style="color:#797593;--shiki-dark:#9ABDF5;">)</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">  const</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> regex</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> /</span><span style="color:#286983;--shiki-dark:#BB9AF7;">^</span><span style="color:#EA9D34;--shiki-dark:#B4F9F8;">1</span><span style="color:#797593;--shiki-dark:#E0AF68;">[</span><span style="color:#286983;--shiki-dark:#E0AF68;">3456789</span><span style="color:#797593;--shiki-dark:#E0AF68;">]</span><span style="color:#286983;--shiki-dark:#BB9AF7;">\\d</span><span style="color:#286983;--shiki-dark:#89DDFF;">{9}</span><span style="color:#286983;--shiki-dark:#BB9AF7;">$</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;font-style:inherit;--shiki-dark-font-style:italic;">  return</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;"> regex</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">test</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#575279;--shiki-dark:#C0CAF5;font-style:italic;--shiki-dark-font-style:inherit;">phoneNumber</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">//</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 内联测试应该放在源码的底部</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> * 为了解决 ts 报错</span></span>
<span class="line"><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> * 需要在 tsconfig.json 中添加</span></span>
<span class="line"><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> * {&quot;compilerOptions&quot;: {&quot;types&quot;: [&quot;vitest/importMeta&quot;]}}</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;">if</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#56949F;--shiki-dark:#7DCFFF;">meta</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#7DCFFF;font-style:italic;--shiki-dark-font-style:inherit;">vitest</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;">  const</span><span style="color:#797593;--shiki-dark:#89DDFF;"> {</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> it</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#BB9AF7;font-style:italic;--shiki-dark-font-style:inherit;"> expect</span><span style="color:#797593;--shiki-dark:#89DDFF;"> }</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> import</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#56949F;--shiki-dark:#7DCFFF;">meta</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#575279;--shiki-dark:#7DCFFF;font-style:italic;--shiki-dark-font-style:inherit;">vitest</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  it</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">phone number belongs to Chinese</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">    expect</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">regChinesePhoneNumber</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">41772566381</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">))</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">toBe</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#D7827E;--shiki-dark:#FF9E64;">false</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span></span>
<span class="line"></span></code></pre><p>随后更新一下<code>vitest.config.ts</code>.</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="export default defineConfig({
  te龍t: {
    includeSource: [&#39;src/**/*.{js,ts}&#39;], 
  }
})
"></div><code><span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">export</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> default</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> defineConfig</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#73DACA;">  test</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#73DACA;">    includeSource</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#575279;--shiki-dark:#9ABDF5;"> [</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">src/**/*.{js,ts}</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">]</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#286983;--shiki-dark:#A9B1D6;"> </span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre><p>可以看到新运行的用例增加了一个非<code>test.ts</code>结尾的文件.<br><img src="https://r2.ray-d-song.com/202312141609782.png" alt="in source test"> 这样做的缺点是会造成打包后的代码体积膨胀, 但我们可以做一些处理让代码块作为不会被执行的区块被 tree-shake 掉.</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="/** vite.config.t龍 */
export default defineConfig({
  define: {
    &#39;import.meta.vitest&#39;: &#39;undefined&#39;, 
  }, 
})
"></div><code><span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> vite.config.ts </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">export</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> default</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;"> defineConfig</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#73DACA;">  define</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#EA9D34;--shiki-dark:#89DDFF;">    &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">import.meta.vitest</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">undefined</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#286983;--shiki-dark:#A9B1D6;"> </span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#286983;--shiki-dark:#A9B1D6;"> </span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre><h2>类型测试 (Experimental)</h2><p>ts 的类型在编译后会被擦除, 也就是说无论类型代码写的有多完备, 对真正运行的 js 代码并不会有影响. 但通过类型测试可以促使类型代码更sound, 以此提高 ts 项目的强健性.<br> 不过总的来说类型测试并不常用, 此处仅介绍一下一般流程.</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="/** /龍rc/types/MPick.d.ts */
// 实现一个自己的 Pick 方法
export type MPick&lt;T, K extends keyof T&gt; = {
  [P in K]: T[P]
}

/** /src/types/__test__/MPick.test-d.ts */

// vitest 会自动扫描 .test-d.ts 命令的文件
import { expectTypeOf, test } from &#39;vitest&#39;
import type { MPick } from &#39;../MPick&#39;

test(&#39;test mock Pick&#39;, () =&gt; {
  interface Foo {
    a: string
    b: number
  }
  type Bar = MPick&lt;Foo, &#39;a&#39;&gt;
  interface Exp {
    a: string
  }
  expectTypeOf&lt;Bar&gt;().toEqualTypeOf&lt;Exp&gt;()
})
"></div><code><span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /src/types/MPick.d.ts </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">//</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> 实现一个自己的 Pick 方法</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">export</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> type</span><span style="color:#56949F;--shiki-dark:#C0CAF5;"> MPick</span><span style="color:#797593;--shiki-dark:#89DDFF;">&lt;</span><span style="color:#56949F;--shiki-dark:#C0CAF5;">T</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#56949F;--shiki-dark:#C0CAF5;"> K</span><span style="color:#286983;--shiki-dark:#9D7CD8;font-style:inherit;--shiki-dark-font-style:italic;"> extends</span><span style="color:#286983;--shiki-dark:#89DDFF;"> keyof</span><span style="color:#56949F;--shiki-dark:#C0CAF5;"> T</span><span style="color:#797593;--shiki-dark:#89DDFF;">&gt;</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#9ABDF5;">  [</span><span style="color:#56949F;--shiki-dark:#C0CAF5;">P</span><span style="color:#286983;--shiki-dark:#89DDFF;"> in</span><span style="color:#56949F;--shiki-dark:#C0CAF5;"> K</span><span style="color:#575279;--shiki-dark:#9ABDF5;">]</span><span style="color:#286983;--shiki-dark:#89DDFF;">:</span><span style="color:#56949F;--shiki-dark:#C0CAF5;"> T</span><span style="color:#575279;--shiki-dark:#9ABDF5;">[</span><span style="color:#56949F;--shiki-dark:#C0CAF5;">P</span><span style="color:#575279;--shiki-dark:#9ABDF5;">]</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">/**</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> /src/types/__test__/MPick.test-d.ts </span><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#797593;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;">//</span><span style="color:#9893A5;--shiki-dark:#51597D;font-style:italic;--shiki-dark-font-style:italic;"> vitest 会自动扫描 .test-d.ts 命令的文件</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> expectTypeOf</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> test</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">vitest</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#7DCFFF;">import</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> type</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span><span style="color:#575279;--shiki-dark:#0DB9D7;font-style:italic;--shiki-dark-font-style:inherit;"> MPick</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> }</span><span style="color:#286983;--shiki-dark:#7DCFFF;"> from</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">../MPick</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">test</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">test mock Pick</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> ()</span><span style="color:#286983;--shiki-dark:#BB9AF7;"> =&gt;</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;">  interface</span><span style="color:#56949F;--shiki-dark:#C0CAF5;"> Foo</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#73DACA;font-style:italic;--shiki-dark-font-style:inherit;">    a</span><span style="color:#286983;--shiki-dark:#89DDFF;">:</span><span style="color:#56949F;--shiki-dark:#0DB9D7;"> string</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#73DACA;font-style:italic;--shiki-dark-font-style:inherit;">    b</span><span style="color:#286983;--shiki-dark:#89DDFF;">:</span><span style="color:#56949F;--shiki-dark:#0DB9D7;"> number</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;">  type</span><span style="color:#56949F;--shiki-dark:#C0CAF5;"> Bar</span><span style="color:#286983;--shiki-dark:#89DDFF;"> =</span><span style="color:#56949F;--shiki-dark:#C0CAF5;"> MPick</span><span style="color:#797593;--shiki-dark:#89DDFF;">&lt;</span><span style="color:#56949F;--shiki-dark:#C0CAF5;">Foo</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;"> &#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">a</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#797593;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#286983;--shiki-dark:#BB9AF7;">  interface</span><span style="color:#56949F;--shiki-dark:#C0CAF5;"> Exp</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#73DACA;font-style:italic;--shiki-dark-font-style:inherit;">    a</span><span style="color:#286983;--shiki-dark:#89DDFF;">:</span><span style="color:#56949F;--shiki-dark:#0DB9D7;"> string</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">  expectTypeOf</span><span style="color:#797593;--shiki-dark:#89DDFF;">&lt;</span><span style="color:#56949F;--shiki-dark:#C0CAF5;">Bar</span><span style="color:#797593;--shiki-dark:#89DDFF;">&gt;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">()</span><span style="color:#286983;--shiki-dark:#89DDFF;">.</span><span style="color:#D7827E;--shiki-dark:#7AA2F7;">toEqualTypeOf</span><span style="color:#797593;--shiki-dark:#89DDFF;">&lt;</span><span style="color:#56949F;--shiki-dark:#C0CAF5;">Exp</span><span style="color:#797593;--shiki-dark:#89DDFF;">&gt;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">()</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre><p>为了启动类型测试, 需要在启动时指定 --typecheck, 添加一个新的 npm 命令 <code>&quot;test:type&quot;: &quot;vitest --typecheck&quot;</code><br> 运行<code>pnpm run test:type</code>运行测试</p><h2>可视化</h2><p>Vitest 提供了 UI 界面进行交互, 运行<code>pnpm install @vitest/ui</code>安装, <code>pnpm run test:unit --ui</code> 启动 <img src="https://r2.ray-d-song.com/202312141744611.png" alt="ui"> 里面涵盖了几乎所有的操作, 还可以查看 console、源码和依赖图. <img src="https://r2.ray-d-song.com/202312141745142.png" alt="Graph"></p><h2>代码覆盖率</h2><p>Vitest 通过 V8 提供代码覆盖率检查, 运行<code>pnpm install @vitest/coverage-v8</code>安装<br> 在 vitest.config 中配置覆盖率选项</p><pre class="shiki shiki-themes rose-pine-dawn tokyo-night" style="background-color:#faf4ed;--shiki-dark-bg:#1a1b26;color:#575279;--shiki-dark:#a9b1d6;" tabindex="0"><div class="copy-container"><div class="lang-symbol">ts</div><img src="`+s+`" class="copy-icon" data-code="defineConfig({
  te龍t: {
    coverage: {
      enabled: true,
      reporter: [&#39;html&#39;]
    }
  }
})
"></div><code><span class="line"><span style="color:#D7827E;--shiki-dark:#7AA2F7;">defineConfig</span><span style="color:#575279;--shiki-dark:#9ABDF5;">(</span><span style="color:#797593;--shiki-dark:#9ABDF5;">{</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#73DACA;">  test</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#73DACA;">    coverage</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#797593;--shiki-dark:#9ABDF5;"> {</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#41A6B5;">      enabled</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#D7827E;--shiki-dark:#FF9E64;"> true</span><span style="color:#797593;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="color:#575279;--shiki-dark:#41A6B5;">      reporter</span><span style="color:#797593;--shiki-dark:#89DDFF;">:</span><span style="color:#575279;--shiki-dark:#9ABDF5;"> [</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#EA9D34;--shiki-dark:#9ECE6A;">html</span><span style="color:#EA9D34;--shiki-dark:#89DDFF;">&#39;</span><span style="color:#575279;--shiki-dark:#9ABDF5;">]</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">    }</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">  }</span></span>
<span class="line"><span style="color:#797593;--shiki-dark:#9ABDF5;">}</span><span style="color:#575279;--shiki-dark:#9ABDF5;">)</span></span>
<span class="line"></span></code></pre><p>这样就可以在 ui 界面上看到代码覆盖率结果了<br><img src="https://r2.ray-d-song.com/202312141752020.png" alt="coverage ui"></p>`,75),r=[o],y="Vue 使用 Vitest 进行单元测试",D="笔者过去并没有写过前端单测, 只在例如 Go 这样社区大力推崇 TDD 的语言中实践过, 最近遇到很多前端通过人肉测试难以覆盖的场景, 因此尝试 vitest.",F="2023-12-18",A="Test",f={__name:"vitest-unit-test",setup(e,{expose:a}){return a({frontmatter:{title:"Vue 使用 Vitest 进行单元测试",intro:"笔者过去并没有写过前端单测, 只在例如 Go 这样社区大力推崇 TDD 的语言中实践过, 最近遇到很多前端通过人肉测试难以覆盖的场景, 因此尝试 vitest.",time:"2023-12-18",tag:"Test"}}),(k,c)=>(i(),n("div",t,r))}};export{f as default,D as intro,A as tag,F as time,y as title};
